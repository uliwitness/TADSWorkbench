<html>
<!-- DERIVED FILE - DO NOT EDIT -->

<head>
<title>Reflection</title>

<style type="text/css"><!--

table.types {
  margin-left: 2em;
  background: #F0F0F0;
}
table.types td {
  text-align: center
  padding-left: 1em;
  padding-right: 1em;
}
table.types tr.odd {
  background: #E0E0E0;
}
--></style>

<link rel="stylesheet" href="sysman.css" type="text/css">
</head>
<body>
<div class="topbar"><img src="topbar.jpg" border=0></div>
<div class="nav">
<a class="nav" href="toc.htm">Table of Contents</a> | 
<a class="nav" href="langsec.htm">The Language</a> &gt; 
Reflection
<br><span class="navnp"><a class="nav" href="undef.htm"><i>Prev:</i> Capturing Calls to Undefined Methods</a> &nbsp;&nbsp;&nbsp; <a class="nav" href="icext.htm"><i>Next:</i> Extending Intrinsic Classes</a> &nbsp;&nbsp;&nbsp; </span>

</div>
<div class="main">

<h1>Reflection</h1>

<p>The term "Reflection" refers to a set of mechanisms in a
programming language that let a running program dynamically inspect
its own structure.  Reflection features vary by language; static
languages such as C and C++ offer essentially no reflection features,
while interpreted languages often let the program do almost anything
the interpreter itself could.

<p>TADS 3 offers a number of reflection features, described below.

<h2>Fundamental-type codes</h2>

<p>Certain reflection functions return or accept "type code" values.
These are integer values arbitrarily assigned to represent the
fundamental system types in these contexts.

<p>The system header file <span class="code">&lt;systype.h&gt;</span> defines macro symbols
for the types:

<p>
<table class=types>
<tr class=odd><td>TypeNil <td>nil
<tr><td>TypeTrue <td>true
<tr class=odd><td>TypeObject <td>object reference
<tr><td>TypeProp <td>property ID
<tr class=odd><td>TypeInt <td>integer
<tr><td>TypeSString <td>single-quoted string
<tr class=odd><td>TypeDString <td>double-quoted string
<tr><td>TypeList <td>list
<tr class=odd><td>TypeCode <td>executable code (i.e., a method)
<tr><td>TypeFuncPtr <td>function pointer
<tr class=odd><td>TypeNativeCode <td>native code (i.e., an intrinsic class method)
<tr><td>TypeEnum <td>enumerator
</table>

<p>Note that List and String objects will be represented with the
TypeList and TypeSString codes, respectively; even though they're
actually object references, the reflection services treat them as
primitive types.  Other object types, such as BigNumber, Vector,
LookupTable, etc., will be reported as TypeObject; you can use the
Object class-sensing methods to determine specifically which type of
object you're working with.


<h2>Determining a value's type</h2>

<p>The TADS language does not require (or allow) you to specify at
compile-time the type of data that a variable or property can hold.
When a program is running, a variable or property can hold any kind of
value, and you can change the type it stores at any time simply by
assigning it a new value.  In this sense, the TADS language is not
"statically typed": there is no compile-time type associated with a
variable or property value.

<p>However, the language is strongly typed - but at run-time rather
than at compile-time.  Each value has a specific type, and the type of
a value itself can never change (even though its container can change
type when you store a new value in it).  In addition, the system does
not allow you to perform arbitrary conversions between types; you can
never use an integer as though it were an object reference, for
example.

<p>You can access the type of any value using the <span class="code">dataType()</span> intrinsic
function.  This function returns a code that indicates the "primitive"
(built-in) type of the value.  The primitive types are the basic types
built in to the language: true, nil, integer, string, list, object
reference, function pointer, property ID, enumerator.

<p>If the primitive type of a value is object reference, you can learn
more about the type by inspecting the class relationships of the
object.  At the simplest level, you can determine if the object is
related by inheritance to a particular class using the <span class="code">ofKind()</span>
method on the object.  If you need more general information, you can
use the <span class="code">getSuperclassList()</span> method to obtain a list of all of the
direct superclasses of the object.

<h3>dataTypeXlat()</h3>

<p>The standard library adds another function, <span class="code">dataTypeXlat()</span>,
that provides a slightly higher-level version of <span class="code">dataType()</span>.  The
two functions are almost identical, except for how they treat
anonymous functions.

<p>An anonymous function is technically an object of intrinsic class
AnonFuncPtr, and <span class="code">dataType()</span> doesn't make any attempt to hide this
fact: it returns TypeObject.

<p>However, for most practical purposes, anonymous functions are
interchangeable with regular function pointers; in practice, you end
up using the two types the same way.  It can thus be slightly
inconvenient that <span class="code">dataType()</span> returns TypeObject for anonymous
functions and TypeFuncPtr for regular function pointers.  This is
where <span class="code">dataTypeXlat()</span> comes in.  This function returns TypeFuncPtr
for an anonymous function object, just as it does for a regular
function pointer.  So, if you're interested in determining whether a
particular value can be used as though it were a function, it's easier
to use <span class="code">dataTypeXlat()</span> to make the determination.

<p>For all other types, the two functions return the same results.


<h2>Determining a property's definition</h2>

<p>The <span class="code">dataType()</span> function can be used with any value, but
sometimes it is useful to obtain the type of a particular property
definition for a particular object without evaluating the property.
If an object's property is defined as a method, evaluating the
property will call the method; sometimes it is necessary to learn
whether or not the property is defined as a method without actually
calling the method.  For these cases, you can use the <span class="code">propType()</span>
method, which obtains the type of data defined for a property without
actually evaluating the property.

<p>You can determine if an object defines a property at all using the
<span class="code">propDefined()</span> method.  This method also lets you determine whether
the object defines the method directly or inherits it from a
superclass, and when the method is inherited, to identify the
superclass from which the object inherits the method.

<h2>Enumerating active objects</h2>

<p>You can enumerate all of the objects in the running program using
the <span class="code">firstObj()</span> and <span class="code">nextObj()</span> intrinsic functions.  These
functions let you iterate through the set of all objects in the
program, including objects statically defined in the compiler and
those dynamically allocated during execution.

<p><div class="code"><pre>
for (local o = firstObj(Thing) ; o != nil ; o = nextObj(o, Thing))
  "&lt;&lt;o.name&gt;&gt;\n";
</pre></div>

<h2>Accessing compiler symbols: the <span class="code">reflectionServices</span> object</h2>

<p>TADS 3 lets a running program access the global symbols that were
defined during compilation.  This powerful capability makes it
possible to interpret strings into object references, properties, and
function references, so that you can do things such as call a property
of an object given the name of the property as a string.

<p>The system library provides an optional module that you can include
in your program for a simple interface to the compiler symbols.  To
use these services, simply include the module reflect.t in your build
Note that this is designed to be a separately-compiled module, so
<b>do not</b> <span class="code">#include</span> it from your source modules - instead,
simply add it to your project (.t3m) file.  If you're not using a project
file, just add it to your t3make command line:

<p><div class="cmdline"><pre>
t3make myProg.t reflect.t
</pre></div>

<p>Note that, by default, reflect.t does not include support for the
BigNumber intrinsic class.  However, you can enable BigNumber support
by defining the symbol <span class="code">REFLECT_BIGNUM</span>, using the <span class="code">-D</span> option
in your project file or on the t3make command line.

<p><div class="cmdline"><pre>
t3make -DREFLECT_BIGNUM myProg.t reflect.t
</pre></div>

<p>The <span class="code">reflectionServices</span> object provides the high-level compiler
symbols interface.  The methods of this object are discussed below.

<h3>formatStackFrame</h3>

<p><span class="code">formatStackFrame(fr, includeSourcePos)</span> returns a string with a
formatted representation of the stack frame fr, which must be an
object of class <span class="code">T3StackInfo</span> (the type of object in the list
returned by the intrinsic function <span class="code">t3GetStackTrace()</span>).  If
<span class="code">includeSourcePos</span> is <span class="code">true</span>, and source information is available
for the frame, the return value includes a printable representation of
the source position's filename and line number.  The return values
look like this:

<p><div class="code"><pre>
myObj.prop1('abc', 123) myProg.t, line 52
</pre></div>

<h3>valToSymbol</h3>

<p><span class="code">valToSymbol(val)</span> converts the value val to a symbolic or string
representation, as appropriate.  If the value is an integer, string,
BigNumber, list, <span class="code">true</span>, or <span class="code">nil</span>, the return value is a string
representation of the value appropriate to the type (in the case of
<span class="code">true</span> and <span class="code">nil</span>, the strings 'true' and 'nil' are returned,
respectively).  If the value is an object, property ID, function
pointer, or enumerator, the return value is a string giving the
symbolic name of the value, if available, or a string showing the type
without a symbol (such as "(obj)" or "(prop)").

<h2>Low-level compiler symbol services</h2>

<p>This section discusses the low-level compiler symbol services.
These services are built into the VM.  In most cases, you should use
the high-level services provided by the <span class="code">reflectionServices</span> object,
since that interface is easier to use and provides substantially the
same capabilities.

<p>The interpreter provides the program with the global symbols via a
LookupTable object.  Each entry in the table has a compiler symbol as
its key, and the symbol's definition as its value.  For example, each
named object defined in the program has an entry in the table with the
compile-time name of the object as the key, and a reference to the
object as its value.  In addition, the table includes all of the
properties, functions, enumerators, and intrinsic classes.

<p>To obtain a reference to the symbol table, use the
<span class="code">t3GetGlobalSymbols()</span> intrinsic function.  This function returns
the LookupTable object, if it's available, or <span class="code">nil</span> if not.

<p>Note that the global symbol table is available from
<span class="code">t3GetGlobalSymbols()</span> only under certain conditions:

<ul>

<li>The global symbols are available during pre-initialization when
building a program.

<li>The symbols are available during a normal interpreter session if
the program was compiled with debugging symbols.

</ul>

<p>At other times - specifically, during normal execution of a program
compiled for release, with no debugging information - the symbol table
is not available, so <span class="code">t3GetGlobalSymbols()</span> will return <span class="code">nil</span>.

<p>Note that you can use the global symbol table during normal
execution of a program compiled for release, if you want.  To do this,
simply obtain a reference to the symbol table in pre-initialization
code, and then store the reference in a property of a
statically-defined object.  When the compiler builds the final image
file, it will automatically keep the symbol table because of the
reference stored in the program.  Here's an example:

<p><div class="code"><pre>
#include &lt;t3.h&gt;
#include &lt;lookup.h&gt;

symtabObj: PreinitObject
  execute()
  {
    // stash a reference to the symbol table in
    // my 'symtab' property, so that it will
    // remain available at run-time
    symtab = t3GetGlobalSymbols();
  }
  symtab = nil
;
</pre></div>

<p>To reference the symbol table at run-time, you would get it from
<span class="code">symtabObj.symtab</span>.  Note that even though you stored a reference to
the table, <span class="code">t3GetGlobalSymbols()</span> will still return nil at run-time
if the program wasn't compiled for debugging; the reference you saved
is to the table that was created during pre-initialization, which at
run-time is just an ordinary LookupTable object loaded from the image
file.

<p>If you don't store a reference to the symbol table during
pre-initialization, the garbage collector will detect that the table
is unreachable, and will automatically discard the object.  This saves
space in the image file (and at run-time) for programs that don't need
access to the information during normal execution.

<p>Here's an example of using the symbol table to call a method by
name.  This example asks the user to type in the name of a method,
then looks up the name in the symbol table and calls the property, if
it's found.

<p><div class="code"><pre>
callMethod(obj)
{
  local methodName;
  local prop;

  // ask for the name of a method to call
  "Enter a method name: ";
  methodName = inputLine();

  // look up the symbol
  prop = symtabObj.symtab[methodName];

  // make sure we found a property
  if (prop == nil)
    "Undefined symbol";
  else if (dataType(prop) != TypeProp)
    "Not a property";
  else
  {
    // be sure to catch any errors in the call
    try
    {
      // call the property with no arguments
      obj.(prop)();
    }

    catch (Exception exc)
    {
      // show the error
      "Error calling method: ";
      exc.displayException();
    }
  }
}
</pre></div>

</div>
<hr class="navb"><div class="navb">
<i>TADS 3 System Manual</i><br>
<a class="nav" href="toc.htm">Table of Contents</a> | 
<a class="nav" href="langsec.htm">The Language</a> &gt; 
Reflection
<br><span class="navnp"><a class="nav" href="undef.htm"><i>Prev:</i> Capturing Calls to Undefined Methods</a> &nbsp;&nbsp;&nbsp; <a class="nav" href="icext.htm"><i>Next:</i> Extending Intrinsic Classes</a> &nbsp;&nbsp;&nbsp; </span>

</div>
</body>
</html>
