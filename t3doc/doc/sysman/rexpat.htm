<html>
<!-- DERIVED FILE - DO NOT EDIT -->

<head>
<title>RexPattern</title>
<link rel="stylesheet" href="sysman.css" type="text/css">
</head>
<body>
<div class="topbar"><img src="topbar.jpg" border=0></div>
<div class="nav">
<a class="nav" href="toc.htm">Table of Contents</a> | 
<a class="nav" href="builtins.htm">The Intrinsics</a> &gt; 
RexPattern
<br><span class="navnp"><a class="nav" href="objic.htm"><i>Prev:</i> Object</a> &nbsp;&nbsp;&nbsp; <a class="nav" href="string.htm"><i>Next:</i> String</a> &nbsp;&nbsp;&nbsp; </span>

</div>
<div class="main">

<h1>RexPattern</h1>

<p>A RexPattern object stores the internal representation, known as
the "compiled" version, of a regular expression pattern.  The internal
details of the compiled representation aren't important, and the
program can't access the compiled data directly.

<p>Every time the program performs a search involving a regular
expression (using the <a href='tadsgen.htm#rexmatch'><span class="code">rexMatch()</span>,
<span class="code">rexSearch()</span>, or <span class="code">rexReplace()</span> functions</a>), the system must
work with the compiled form of the search pattern.  The simplest way
to call these functions is to pass them a string giving the search
pattern, but when the program does this, the system must compile the
string, which converts the string to the internal representation.
This compilation process is relatively time-consuming; typically,
compiling the pattern takes about half the time involved in performing
a regular expression search.

<p>The purpose of the RexPattern class is to let the program perform
this compilation work just once for a given pattern string, and then
re-use the same compiled representation every time the program
searches for the pattern.  If a given pattern is used repeatedly, this
can improve the program's efficiency by avoiding repeated compilation
of the same pattern string.

<h2>RexPattern creation</h2>

<p>Creating a RexPattern object is simple: just use the <span class="code">new</span> operator
to create the object, giving the pattern string as the argument:

<p><div class="code"><pre>
local pat = new RexPattern('a.*b');
</pre></div>

<p>This creates the pattern object and compiles the pattern string.
You can now use the object in the regular expression search and match
functions (<span class="code">rexMatch()</span>, etc.) in place of the pattern string.  The
functions will behave exactly as though you had used the original
pattern string, except that they will run a little faster, because
they won't need to compile the string.

<h2>RexPattern methods</h2>

<p>The class provides the standard Object intrinsic class methods,
plus the following:

<p><span class="code">getPatternString()</span>
<div class=fdef>

Returns the original string used to create the object (i.e., the
string passed as the argument in the "new" expression that created the
object).

</div>





</div>
<hr class="navb"><div class="navb">
<i>TADS 3 System Manual</i><br>
<a class="nav" href="toc.htm">Table of Contents</a> | 
<a class="nav" href="builtins.htm">The Intrinsics</a> &gt; 
RexPattern
<br><span class="navnp"><a class="nav" href="objic.htm"><i>Prev:</i> Object</a> &nbsp;&nbsp;&nbsp; <a class="nav" href="string.htm"><i>Next:</i> String</a> &nbsp;&nbsp;&nbsp; </span>

</div>
</body>
</html>

